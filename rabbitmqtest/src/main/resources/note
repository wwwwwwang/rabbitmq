channel.queueDeclare：
    第一个参数：队列名字，
    第二个参数：队列是否可持久化即重启后该队列是否依然存在，
    第三个参数：该队列是否时独占的即连接上来时它占用整个网络连接，
    第四个参数：是否自动销毁即当这个队列不再被使用的时候即没有消费者对接上来时自动删除，
    第五个参数：其他参数如TTL（队列存活时间）等。
channel.basicConsume：
    第一个参数：队列名字，
    第二个参数：是否自动应答，如果为真，消息一旦被消费者收到，服务端就知道该消息已经投递，
        从而从队列中将消息剔除，否则，需要在消费者端手工调用channel.basicAck()方法通知服务端，
        如果没有调用，消息将会进入unacknowledged状态，并且当消费者连接断开后变成ready状态重新进入队列，
    第三个参数，具体消费者类。

 RabbitMQ默认有一个exchange，叫default exchange，它用一个空字符串表示，它是direct exchange类型，
 任何发往这个exchange的消息都会被路由到routing key的名字对应的队列上，如果没有对应的队列，
 则消息会被丢弃。这就是为什么代码中channel执行basicPulish方法时，第二个参数本应该为routing key，
 却被写上了QUEUE_NAME。


如果你不告诉RabbitMQ，当RabbitMQ服务器挂了，她可能就丢失所有队列中的消息和任务。如果你想让RabbitMQ记住她当前的状态和内容，就需要通过2件事来确保消息和任务不会丢失。
第一件事，在队列声明时，告诉RabbitMQ，这个队列需要持久化：
boolean durable = true;
channel.queueDeclare("hello", durable, false, false, null);


这里关键的是BasicProperties props这个参数了，这里看下BasicProperties的定义：
public BasicProperties(
            String contentType,//消息类型如：text/plain
            String contentEncoding,//编码
            Map<String,Object> headers,
            Integer deliveryMode,//1:nonpersistent 2:persistent
            Integer priority,//优先级
            String correlationId,
            String replyTo,//反馈队列
            String expiration,//expiration到期时间
            String messageId,
            Date timestamp,
            String type,
            String userId,
            String appId,
            String clusterId)
这里的deliveryMode=1代表不持久化，deliveryMode=2代表持久化。

上面的实现代码使用的是MessageProperties.PERSISTENT_TEXT_PLAIN，那么这个又是什么呢？

public static final BasicProperties PERSISTENT_TEXT_PLAIN =
    new BasicProperties("text/plain",
                        null,
                        null,
                        2,
                        0, null, null, null,
                        null, null, null, null,
                        null, null);
可以看到这其实就是讲deliveryMode设置为2的BasicProperties的对象，为了方便编程而出现的一个东东。
换一种实现方式：

AMQP.BasicProperties.Builder builder = new AMQP.BasicProperties.Builder();
builder.deliveryMode(2);
AMQP.BasicProperties properties = builder.build();
channel.basicPublish("exchange.persistent", "persistent",properties, "persistent_test_message".getBytes());

设置了队列和消息的持久化之后，当broker服务重启的之后，消息依旧存在。单只设置队列持久化，
重启之后消息会丢失；单只设置消息的持久化，重启之后队列消失，既而消息也丢失。单单设置消
息持久化而不设置队列的持久化显得毫无意义。



